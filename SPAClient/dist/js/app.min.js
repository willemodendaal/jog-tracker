(function(){
    var authModule = angular.module('jogTracker.api.auth', [])
        .config(function($httpProvider) {
            $httpProvider.interceptors.push('loginInterceptor');
        });

    authModule.value('userInfo', { auth_token: null }); //Will be updated by the loginInterceptor.
}());

(function() {
    var apiModule = angular.module('jogTracker.api', ['jogTracker.api.auth']);

    var host = 'https://dev.jogTracker.api';
    var baseUrl = host + '/api/v1';

    var jogUrl = function(jogId) {
        if (jogId) {
            return baseUrl + '/jog/' + jogId;
        }

        return baseUrl + '/jog';
    };

    var updateJogUrl = function(jogId) {
        return baseUrl + '/jog/' + jogId + '/update';
    };

    apiModule.constant('apiUrls', {
        register: baseUrl + '/account/register',
        registerAsAdmin: baseUrl + '/account/registerAsAdmin',
        requestResetPwd: baseUrl + '/account/requestResetPwd',
        resetPwd: baseUrl + '/account/resetPwd',

        login: host + '/token',

        jogs: jogUrl,
        newJog: baseUrl + '/jog/new',
        updateJog: updateJogUrl
    });

}());


angular.module('jogTracker', [
    'jogTracker.api',
    'ui.router',
    'ngAnimate',
    'toastr'])

    .config(function($stateProvider, $urlRouterProvider){

        //By default, go home.
        $urlRouterProvider.otherwise("/");

        $stateProvider
            .state('login', {
                url: "/login",
                templateUrl: "partials/login.html"
            })
            .state('register', {
                url: "/register",
                templateUrl: "partials/register.html"
            })
            .state('main', {
                url: "/",
                templateUrl: "partials/main.html"
            })
            .state('main.jogs', {
                url: "jogs",
                templateUrl: "partials/main.jogs.html"
            })
            .state('main.reports', {
                url: "reports",
                templateUrl: "partials/main.reports.html"
            })
            .state('main.admin', { //For admin functions, like user maintenance.
                url: "admin",
                templateUrl: "partials/main.admin.html"
            });
    });

(function (moment) {

    angular
        .module('jogTracker')
        .controller('jogEditController', jogEditController);

    jogEditController.$inject = [
        '$scope',
        '$log',
        'jogDataFactory'];

    function jogEditController($scope, $log, jogDataFactory) {

        $scope.title = 'New Jog';
        $scope.buttonText = 'Create New';

        $scope.date = moment();
        $scope.durationMinutes = 1;
        $scope.distanceKm = 0;

        $scope.save = function() {
            alert('Saved');
        };

        $log.info('JogEdit controller loaded.');
    }

}(moment));

(function (moment) {

    angular
        .module('jogTracker')
        .controller('jogsController', jogsController);

    jogsController.$inject = [
        '$scope',
        '$log',
        'jogDataFactory'];

    function jogsController($scope, $log, jogDataFactory) {

        $scope.jogs = [];
        $scope.fromDate = moment().subtract(7, 'days'); //Default filter from last week.
        $scope.toDate = moment();
        $scope.pageIndex = 0;
        $scope.pageSize = 30;

        var _reloadData = function() {
            jogDataFactory.getList($scope.fromDate, $scope.toDate, $scope.pageIndex, $scope.pageSize)
                .then(function(data)
                {
                    $scope.jogs = data;
                })
                .catch(function(err) {
                    //Todo: show toast.
                    alert('Unable to load jogs data. Message: ' + err);
                });
        };

        _reloadData();
        $log.info('Jogs controller loaded.');
    }

}(moment));

(function () {

    angular
        .module('jogTracker')
        .controller('loginController', loginController);

    loginController.$inject = [
        '$scope',
        '$log',
        '$state',
        'accountFactory',
        'userInfo'
       ];

    function loginController($scope, $log, $state, accountFactory, userInfo) {
        $scope.login = function () {
            var p = accountFactory.login( $scope.email, $scope.password )
                .then(function(token) {
                    userInfo.access_token = token;
                    $state.go('main');
                })
                .catch(function(err) {
                    //Todo: show toast.
                    alert('Unable to login. Message: ' + err);
                });
        };

        $log.info('Login controller loaded.');
    }

}());

(function () {

    angular
        .module('jogTracker')
        .controller('mainController', mainController);

    mainController.$inject = [
        '$scope',
        '$log',
        '$state',
        'accountFactory'];

    function mainController($scope, $log, $state, accountFactory) {
        $scope.registerPlease = function () {
            var p = accountFactory.register($scope.email, $scope.firstName, $scope.lastName, $scope.password);

            p.then(function () {
                    alert('Registration done, and happy.');
                })
                .catch(function () {
                    alert('something went wrong.');
                });
        };

        $scope.$on('must-login', function() {
            $state.go('login');
        });


        $log.info('Main controller loaded.');
    }

}());

(function () {

    angular
        .module('jogTracker')
        .controller('registerController', registerController);

    registerController.$inject = [
        '$scope',
        '$log',
        '$state',
        'accountFactory',
        'userInfo',
        'toastr'
    ];

    function registerController($scope, $log, $state, accountFactory, userInfo, toastr) {

        $scope.friendlyErrors = []; //Registration error message (i.e. invalid password)
        $scope.disableButton = false;
        $scope.buttonText = "Register";

        var _setDisabled = function(disabled) {
            if (disabled) {
                $scope.disableButton = true;
                $scope.buttonText = "Registering...";
            }
            else {
                $scope.disableButton = false;
                $scope.buttonText = "Register";
            }
        };

        var _doLogin = function() {
            //Success. Do login and redirect.
            _setDisabled(true);
            accountFactory.login($scope.email, $scope.password)
                .then(function (token) {
                    userInfo.access_token = token;
                    $state.go('main');
                })
                .catch(function (err) {
                    _toastError(err, 'Login Error');
                    _setDisabled(false);
                });
        };

        var _toastError = function(err, title) {
            //Show error in a toast.
            if (err.data.Message) {
                toastr.error(err.data.Message, title);
            }
            else {
                toastr.error(err.statusText, title);
            }
        };

        var _getValidationErrors = function(err) {
            if (!err.data || !err.data.ModelState) {
                return 'Request contained invalid data.';
            }

            var messages = [];
            for (var field in err.data.ModelState) {
                    if (err.data.ModelState.hasOwnProperty(field)) {

                        var array = err.data.ModelState[field];
                        for(var i = 0; i < array.length; i++) {
                            messages.push(array[i]);
                        }
                }
            }

            return messages;
        };

        $scope.register = function () {
            _setDisabled(true);

            accountFactory.register( $scope.email, $scope.firstName, $scope.lastName, $scope.password )
                .then(_doLogin)
                .catch(function(err) {
                    _setDisabled(false);

                    if (err.status == 500) {
                        _toastError(err, 'Registration Error');
                    } else {
                        //Show error on the page (could be something like 'user name taken already'.
                        $scope.friendlyErrors = _getValidationErrors(err);
                    }
                });
        };

        $log.info('Login controller loaded.');
    }

}());

//Injects access token into all outgoing requests, and
//  intercepts HTTP 401's and 403's, and broadcasts an event that can be
//  handled, by the UI (forcing the user to login).
(function(){
    angular.module('jogTracker.api.auth')
        .service('loginInterceptor', loginInterceptor);

    loginInterceptor.$inject = ['$rootScope', '$q', 'userInfo'];

    function loginInterceptor($rootScope, $q, userInfo) {
        var service = this;

        service.request = function(config) {

            if (userInfo.authToken) {
                config.headers.authorization = userInfo.access_token;
            }
            return config;
        };

        service.responseError = function(response) {
            if (response.status === 401 || response.status === 403) {
                //Ensure token is not set. If it was, there is something wrong with it.
                userInfo.access_token = null;

                //Broadcast so that app can nav to the login page.
                $rootScope.$broadcast('must-login');
            }
            return $q.reject(response); //must reject explicitly.
        };
    }
}());

(function() {

    angular.module('jogTracker.api')
        .factory('accountFactory', accountFactory);

    accountFactory.$inject = ['$log', '$http', '$q', 'apiUrls'];

    function accountFactory($log, $http, $q, apiUrls) {

        var _successLog = function (data, status, headers, config) {
            $log.info('Successful response from Api. Data: ', data, ', status: ', status, ', headers: ', headers, 'config: ', config);
        };

        /*          *
         *  Login   *
         *          */
        var login = function(email, password) {
            //Logs in, and resolves promise with Token.
            var payload = {
                userName: email,
                password: password,
                grant_type: 'password'
            };

            var deferred = $q.defer();

            //Need to encode this way to make ASP.NET WebAPI happy.
            var stringPayload = "userName=" + encodeURIComponent(email) +
                            "&password=" + encodeURIComponent(password) +
                            "&grant_type=password";

            $http({
                url: apiUrls.login,
                data: stringPayload,
                method: 'post'
            })
                .success(function (data, status, headers, config) {
                    $log.info('Login ok.');
                    var token = data.access_token;
                    deferred.resolve(token);
                })
                .error(function (err) {
                    deferred.reject(err);
                });

            return deferred.promise;
        };

        /*             *
         *   Register  *
         *             */
        var register = function(email, firstName, lastName, password) {
            var payload = {
                email: email,
                firstName: firstName,
                lastName: lastName,
                password: password
            };

            return $http.post(apiUrls.register, payload).success(_successLog);
        };


        /*                    *
         *   RegisterAsAdmin  *
         *                    */
        //Protected by role-based security on the server.
        var registerAsAdmin = function(email, firstName, lastName, password, makeAdmin) {
            var payload = {
                email: email,
                firstName: firstName,
                lastName: lastName,
                password: password,
                admin: makeAdmin
            };

            return $http.post(apiUrls.registerAsAdmin, payload).success(_successLog);
        };


        return {
            register : register,
            registerAsAdmin: registerAsAdmin,
            login : login
        };
    }
}());


(function() {

    angular.module('jogTracker.api')
        .factory('jogDataFactory', jogDataFactory);

    jogDataFactory.$inject = [
        '$log',
        'apiUrls',
        '$http'
    ];

    function jogDataFactory($log, apiUrls, $http) {
        $log.info('jogDataFactory loaded.');

        /*             *
         *   getList   *
         *             */
        var getList = function(fromDate, toDate, pageIndex, pageSize) {
            var payLoad = {
                fromDate: fromDate,
                toDate: toDate,
                pageIndex: pageIndex,
                pageSize: pageSize
            };

            return $http.get(apiUrls.jogs(), {
                params: payLoad
            });
        };

        /*             *
         *   Get       *
         *             */
        var get = function(jogId) {
            return $http.get(apiUrls.jogs(jogId), {
                params: { jogId: jogId }
            });
        };

        /*             *
         *   Del       *
         *             */
        var del = function(jogId) {
            return $http.delete(apiUrls.jogs(jogId), {
                params: { jogId: jogId }
            });
        };

        /*             *
         *   Create    *
         *             */
        var create = function(dateTime, distance, duration) {
            var payLoad = {
                dateTime: dateTime,
                distance: distance,
                duration: duration
            };

            return $http.post(apiUrls.newJog, payLoad);
        };

        /*             *
         *   Update    *
         *             */
        var update = function(jogId, dateTime, distance, duration) {
            var payLoad = {
                dateTime: dateTime,
                distance: distance,
                duration: duration
            };

            return $http.put(apiUrls.updateJog(jogId), payLoad);
        };

        return {
            getList : getList,
            get : get,
            del: del,
            create: create,
            update: update
        };
    }
}());

//# sourceMappingURL=app.min.js.map