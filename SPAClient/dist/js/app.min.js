(function(){
    var authModule = angular.module('jogTracker.api.auth', [])
        .config(function($httpProvider) {
            $httpProvider.interceptors.push('loginInterceptor');
        });

    authModule.value('userInfo', { access_token: null }); //Will be updated by the loginInterceptor.
}());

(function() {
    var apiModule = angular.module('jogTracker.api', ['jogTracker.api.auth']);

    var host = 'https://dev.jogTracker.api';
    var baseUrl = host + '/api/v1';

    var jogUrl = function(jogId) {
        if (jogId) {
            return baseUrl + '/jog/' + jogId;
        }

        return baseUrl + '/jog';
    };

    var updateJogUrl = function(jogId) {
        return baseUrl + '/jog/' + jogId + '/update';
    };

    apiModule.constant('apiUrls', {
        register: baseUrl + '/account/register',
        registerAsAdmin: baseUrl + '/account/registerAsAdmin',
        requestResetPwd: baseUrl + '/account/requestResetPwd',
        resetPwd: baseUrl + '/account/resetPwd',

        login: host + '/token',
        userInfo: baseUrl + '/account',

        jogs: jogUrl,
        newJog: baseUrl + '/jog/new',
        updateJog: updateJogUrl
    });

}());


angular.module('jogTracker', [
    'jogTracker.api',
    'jogTracker.validation',
    'ui.router',
    'ui.bootstrap',
    'ngAnimate',
    'toastr', //"toaster" for notification messages
    'angular-md5' //Needed to hash user email for gravatar
    ])

    .config(function($stateProvider, $urlRouterProvider){

        //By default, go home.
        $urlRouterProvider.otherwise("/");

        $stateProvider
            .state('login', {
                url: "/login",
                templateUrl: "partials/login.html"
            })
            .state('register', {
                url: "/register",
                templateUrl: "partials/register.html"
            })
            .state('main', {
                url: "/",
                templateUrl: "partials/main.html"
            })
            .state('main.jogs', {
                url: "jogs",
                templateUrl: "partials/main.jogs.html"
            })
            .state('main.reports', {
                url: "reports",
                templateUrl: "partials/main.reports.html"
            })
            .state('main.admin', { //For admin functions, like user maintenance.
                url: "admin",
                templateUrl: "partials/main.admin.html"
            })
            .state('main.account', {
                url: "account",
                templateUrl: "partials/main.account.html"
            });
    });

(function() {
    angular.module('jogTracker.validation', []);
}());


(function (moment) {

    angular
        .module('jogTracker')
        .controller('jogEditController', jogEditController);

    jogEditController.$inject = [
        '$scope',
        '$log',
        'jogDataFactory',
        'notificationUtils',
        'validatorUtils'];

    function jogEditController($scope, $log, jogDataFactory, notificationUtils, validatorUtils) {

        $scope.panelOpen = true; //Show 'add' panel by default.
        $scope.dtFormat = 'yyyy/MM/dd';
        $scope.date = moment().format('YYYY/MM/DD');

        var _reset = function() {
            $scope.title = 'Record Jog';
            $scope.buttonText = 'Create New';
            $scope.friendlyErrors = []; //validation errors.
            $scope.disableButton = false;
            $scope.opened = false;
            $scope.durationMinutes = 0;
            $scope.distanceKm = 0;
        };

        var _setDisabled = function(disabled) {
            if (disabled) {
                $scope.disableButton = true;
                $scope.buttonText = "Create new...";
            }
            else {
                $scope.disableButton = false;
                $scope.buttonText = "Create new";
            }
        };

        $scope.startAddNew = function() {
            _reset();
            $scope.panelOpen = true;
        };

        $scope.closePanel = function() {
            $scope.panelOpen = false;
            _reset();
        };

        $scope.toggleDatePicker = function($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.opened = !$scope.opened;
        };


        $scope.save = function(validForm) {

            if (! validForm) {
                return;
            }

            _setDisabled(true);
            $scope.friendlyErrors = [];

            var duration = moment.duration(Number($scope.durationMinutes), 'minutes');
            var durationString = duration.hours() + ':' + duration.minutes() + ':' + duration.seconds();

            jogDataFactory.create($scope.date, $scope.distanceKm, durationString)
                .then(function(data)
                {
                    notificationUtils.showSuccess('Jog logged.', 'Success');
                    $scope.$emit('refresh'); //Indicate that a refresh is required.
                    $scope.closePanel();
                })
                .catch(function(err) {
                    _setDisabled(false);

                    if (err.status == 500) {
                        notificationUtils.showErrorToast(err, 'Error saving jog');
                    } else {
                        //Show error on the page (could be something like 'user name taken already'.
                        $scope.friendlyErrors = validatorUtils.getValidationErrors(err);
                    }
                });
        };

        _reset();
        $log.info('JogEdit controller loaded.');
    }

}(moment));

(function (moment, _) {

    angular
        .module('jogTracker')
        .controller('jogsController', jogsController);

    jogsController.$inject = [
        '$scope',
        '$log',
        'jogDataFactory',
        'notificationUtils'];

    function jogsController($scope, $log, jogDataFactory, notificationUtils) {

        $scope.jogs = [];
        $scope.pageNumber = 1;
        $scope.pageSize = 3;
        $scope.totalItems = 0;
        $scope.dtPickers = {
            from: { opened: false, date: moment().subtract(1, 'months').format($scope.dtFormat)},
            to: { opened: false, date: moment().format($scope.dtFormat)}
        };
        $scope.dtFormat = 'yyyy/MM/dd';

        $scope.noData = function() {
            return $scope.jogs.length == 0;
        };

        $scope.$on('refresh', function() {
            _reloadData();
        });

        $scope.pageChanged = function() {
            _reloadData();
        };

        $scope.dateChanged = function() {
            _reloadData();
        };

        $scope.selectJog = function(jog) {
            _deselectOtherJogs(jog);
            jog.selected = true;
            //Open in 'edit' panel.
        };

        $scope.toggleDatePicker = function($event, picker) {
            $event.preventDefault();
            $event.stopPropagation();
            picker.opened = !picker.opened;
        };

        var _deselectOtherJogs = function(jog) {
            var otherJogs = _.filter(
                $scope.jogs,
                function(j) {
                    return j.id != jog.id;
                });

            _.each(
                otherJogs,
                function(j) {
                    j.selected = false;
                });
        };

        var _reloadData = function() {

            var fromDate = $scope.dtPickers.from.date;
            var toDate = $scope.dtPickers.to.date;

            if (!fromDate) {
                fromDate = moment().subtract(1, 'months');
            }

            if (!toDate) {
                toDate = moment();
            }

            jogDataFactory.getList(fromDate, toDate, $scope.pageNumber - 1, $scope.pageSize)
                .then(function(data)
                {
                    $scope.totalItems = data.TotalResults;
                    $scope.jogs = data.Items;
                })
                .catch(function(err) {
                    notificationUtils.showErrorToast(err, 'Error listing jogs');
                });
        };

        _reloadData();
        $log.info('Jogs controller loaded.');
    }

}(moment, _));

(function () {

    angular
        .module('jogTracker')
        .controller('loginController', loginController);

    loginController.$inject = [
        '$scope',
        '$log',
        '$state',
        'accountFactory',
        'notificationUtils',
        'validatorUtils'
       ];

    function loginController($scope, $log, $state, accountFactory, notificationUtils, validatorUtils) {

        $scope.disableButton = false;
        $scope.buttonText = "Login";
        $scope.friendlyErrors = [];

        var _setDisabled = function(disabled) {
            if (disabled) {
                $scope.disableButton = true;
                $scope.buttonText = "Login...";
            }
            else {
                $scope.disableButton = false;
                $scope.buttonText = "Login";
            }
        };

        $scope.login = function () {
            _setDisabled(true);
            $scope.friendlyErrors = [];

            accountFactory.login( $scope.email, $scope.password )
                .then(function(token) {
                    sessionStorage.access_token = token;
                    $state.go('main');
                })
                .catch(function(err) {
                    _setDisabled(false);

                    if (err.status == 500) {
                        notificationUtils.showErrorToast(err, 'Login Error');
                    } else {
                        //Show error on the page (could be something like 'user name taken already'.
                        $scope.friendlyErrors = validatorUtils.getValidationErrors(err);
                    }
                });
        };

        $log.info('Login controller loaded.');
    }

}());

(function () {

    angular
        .module('jogTracker')
        .controller('mainController', mainController);

    mainController.$inject = [
        '$scope',
        '$log',
        '$state',
        'accountFactory',
        'md5',
        'notificationUtils'];

    function mainController($scope, $log, $state, accountFactory, md5, notificationUtils) {

        $scope.userFirstName = 'User';
        $scope.userImage = '';

        var _getUserImage = function(email) {
            var hash = md5.createHash(email || '');
            return 'http://www.gravatar.com/avatar/' + hash + '?s=20&d=mm';
        };

        var _fetchUserInfo = function() {
            accountFactory.getUserInfo()
                .then(function(userInfo) {
                    $scope.userFirstName = userInfo.data.firstName;
                    $scope.userImage = _getUserImage(userInfo.data.email);
                })
                .catch(function(err) {
                    notificationUtils.showErrorToast(err, 'Error fetching info');
                });
        };

        $scope.registerPlease = function () {
            var p = accountFactory.register($scope.email, $scope.firstName, $scope.lastName, $scope.password);

            p.then(function () {
                    alert('Registration done, and happy.');
                })
                .catch(function () {
                    alert('something went wrong.');
                });
        };

        $scope.$on('must-login', function() {
            $state.go('login');
        });

        _fetchUserInfo();
        $log.info('Main controller loaded.');
    }

}());

(function () {

    angular
        .module('jogTracker')
        .controller('registerController', registerController);

    registerController.$inject = [
        '$scope',
        '$log',
        '$state',
        'accountFactory',
        'validatorUtils',
        'notificationUtils'
    ];

    function registerController($scope, $log, $state, accountFactory, validatorUtils, notificationUtils) {

        $scope.friendlyErrors = []; //Registration error message (i.e. invalid password)
        $scope.disableButton = false;
        $scope.buttonText = "Register";

        var _setDisabled = function(disabled) {
            if (disabled) {
                $scope.disableButton = true;
                $scope.buttonText = "Registering...";
            }
            else {
                $scope.disableButton = false;
                $scope.buttonText = "Register";
            }
        };

        var _doLogin = function() {
            //Success. Do login and redirect.
            _setDisabled(true);
            accountFactory.login($scope.email, $scope.password)
                .then(function (token) {
                    sessionStorage.access_token = token;
                    $state.go('main');
                })
                .catch(function (err) {
                    notificationUtils.showErrorToast(err, 'Login Error');
                    _setDisabled(false);
                });
        };

        $scope.register = function () {
            _setDisabled(true);
            $scope.friendlyErrors = [];

            accountFactory.register( $scope.email, $scope.firstName, $scope.lastName, $scope.password )
                .then(_doLogin)
                .catch(function(err) {
                    _setDisabled(false);

                    if (err.status == 500) {
                        notificationUtils.showErrorToast(err, 'Registration Error');
                    } else {
                        //Show error on the page (could be something like 'user name taken already'.
                        $scope.friendlyErrors = validatorUtils.getValidationErrors(err);
                    }
                });
        };

        $log.info('Login controller loaded.');
    }

}());

(function () {

    angular
        .module('jogTracker')
        .directive('errorPanel', function() {
            return {
                restrict: 'E',
                templateUrl: '/partials/errorPanel.html'
            };
        });

}());

// Focus directive code from here: http://stackoverflow.com/questions/14995884/select-text-on-input-focus
(function () {
    angular
        .module('jogTracker')
        .directive('selectOnClick', ['$window', function ($window) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    element.on('click', function () {
                        if (!$window.getSelection().toString()) {
                            this.setSelectionRange(0, this.value.length)
                        }
                    });
                }
            };
    }]);

}());

//Injects access token into all outgoing requests, and
//  intercepts HTTP 401's and 403's, and broadcasts an event that can be
//  handled, by the UI (forcing the user to login).
(function(){
    angular.module('jogTracker.api.auth')
        .service('loginInterceptor', loginInterceptor);

    loginInterceptor.$inject = ['$rootScope', '$q'];

    function loginInterceptor($rootScope, $q) {
        var service = this;

        service.request = function(config) {

            if (sessionStorage.access_token) {
                config.headers.authorization = sessionStorage.access_token;
            }
            return config;
        };

        service.responseError = function(response) {
            if (response.status === 401 || response.status === 403) {
                //Ensure token is not set. If it was, there is something wrong with it.
                sessionStorage.access_token = null;

                //Broadcast so that app can nav to the login page.
                $rootScope.$broadcast('must-login');
            }
            return $q.reject(response); //must reject explicitly.
        };
    }
}());

(function() {

    angular.module('jogTracker.api')
        .factory('accountFactory', accountFactory);

    accountFactory.$inject = ['$log', '$http', '$q', 'apiUrls'];

    function accountFactory($log, $http, $q, apiUrls) {

        var _successLog = function (data, status, headers, config) {
            $log.info('Successful response from Api. Data: ', data, ', status: ', status, ', headers: ', headers, 'config: ', config);
        };

        /*          *
         *  Login   *
         *          */
        var login = function(email, password) {
            //Logs in, and resolves promise with Token.
            var payload = {
                userName: email,
                password: password,
                grant_type: 'password'
            };

            var deferred = $q.defer();

            //Need to encode this way to make ASP.NET WebAPI happy.
            var stringPayload = "userName=" + encodeURIComponent(email) +
                            "&password=" + encodeURIComponent(password) +
                            "&grant_type=password";

            $http({
                url: apiUrls.login,
                data: stringPayload,
                method: 'post'
            })
                .success(function (data, status, headers, config) {
                    $log.info('Login ok.');
                    var token = 'bearer ' + data.access_token;
                    deferred.resolve(token);
                })
                .error(function (err) {
                    deferred.reject(err);
                });

            return deferred.promise;
        };

        /*             *
         *   Register  *
         *             */
        var register = function(email, firstName, lastName, password) {
            var payload = {
                email: email,
                firstName: firstName,
                lastName: lastName,
                password: password
            };

            return $http.post(apiUrls.register, payload).success(_successLog);
        };


        /*                    *
         *   RegisterAsAdmin  *
         *                    */
        //Protected by role-based security on the server.
        var registerAsAdmin = function(email, firstName, lastName, password, makeAdmin) {
            var payload = {
                email: email,
                firstName: firstName,
                lastName: lastName,
                password: password,
                admin: makeAdmin
            };

            return $http.post(apiUrls.registerAsAdmin, payload).success(_successLog);
        };

        /*                                *
         *   Get logged in user info      *
         *                                */
        var getUserInfo = function(jogId) {
            console.log('Fetching current user info...');
            return $http.get(apiUrls.userInfo);
        };


        return {
            register : register,
            registerAsAdmin: registerAsAdmin,
            login : login,
            getUserInfo: getUserInfo
        };
    }
}());


(function() {

    angular.module('jogTracker.api')
        .factory('jogDataFactory', jogDataFactory);

    jogDataFactory.$inject = [
        '$log',
        'apiUrls',
        '$http',
        '$q'
    ];

    var dateFormat = 'YYYY-MM-DDT00:00:00';

    function jogDataFactory($log, apiUrls, $http, $q) {
        $log.info('jogDataFactory loaded.');

        /*             *
         *   getList   *
         *             */
        var getList = function(fromDate, toDate, pageIndex, pageSize) {
            var deferred = $q.defer();

            var from;
            if (fromDate.format) {
                //already a moment date.
                from = fromDate.format(dateFormat);
            }
            else {
                from = moment(fromDate).format(dateFormat);
            }

            var to;
            if (toDate.format) {
                //already a moment date.
                //Add 1 day, we want the whole of the end date.
                to = toDate.add(1,'days').format(dateFormat);
            }
            else {
                //Add 1 day, we want the whole of the end date.
                to = moment(toDate).add(1,'days').format(dateFormat);
            }

            //Swap the dates if they are the wrong way around (lets be nice to the user).
            if (moment(fromDate) > moment(toDate)) {
                var temp = to;
                to = from;
                from = temp;
            }

            var payLoad = {
                fromDate: from,
                toDate: to,
                pageIndex: pageIndex,
                pageSize: pageSize
            };

            $http.get(apiUrls.jogs(), {
                    params: payLoad
                })
                .success(function (data, status, headers, config) {
                    deferred.resolve(data);
                })
                .error(function (err) {
                    deferred.reject(err);
                });
            ;

            return deferred.promise;
        };

        /*             *
         *   Get       *
         *             */
        var get = function(jogId) {
            return $http.get(apiUrls.jogs(jogId), {
                params: { jogId: jogId }
            });
        };

        /*             *
         *   Del       *
         *             */
        var del = function(jogId) {
            return $http.delete(apiUrls.jogs(jogId), {
                params: { jogId: jogId }
            });
        };

        /*             *
         *   Create    *
         *             */
        var create = function(dateTime, distance, duration) {
            var payLoad = {
                dateTime: dateTime,
                distanceKm: distance,
                duration: duration
            };

            return $http.post(apiUrls.newJog, payLoad);
        };

        /*             *
         *   Update    *
         *             */
        var update = function(jogId, dateTime, distance, duration) {
            var payLoad = {
                dateTime: dateTime,
                distanceKm: distance,
                duration: duration
            };

            return $http.put(apiUrls.updateJog(jogId), payLoad);
        };

        return {
            getList : getList,
            get : get,
            del: del,
            create: create,
            update: update
        };
    }
}());

(function() {

    angular.module('jogTracker')
        .factory('notificationUtils', notificationUtils);

    notificationUtils.$inject = ['$log', 'toastr'];

    function notificationUtils($log, toastr) {
        $log.info('notificationUtils loaded.');

        var showErrorToast = function(err, title) {
            //Show error in a toast.
            if (err.data.Message) {
                toastr.error(err.data.Message, title);
            }
            else {
                toastr.error(err.statusText, title);
            }
        };

        var showSuccess = function(message, title) {
            toastr.success(message, title);
        };

        return {
            showErrorToast : showErrorToast,
            showSuccess: showSuccess
        };
    }
}());

(function() {

    angular.module('jogTracker.validation')
        .factory('validatorUtils', validatorUtils);

    validatorUtils.$inject = ['$log'];

    function validatorUtils($log) {
        $log.info('validatorUtils loaded.');

        //Return collection of strings of errors to show on front-end.
        //  (get errors from server response)
        var getValidationErrors = function(httpError) {
            if (!httpError.data || !httpError.data.ModelState) {

                if (httpError.error_description) { //returned by Owin/OAuth
                    return [httpError.error_description];
                }

                return ['Request contained invalid data.'];
            }

            var messages = [];
            for (var field in httpError.data.ModelState) {
                if (httpError.data.ModelState.hasOwnProperty(field)) {

                    var array = httpError.data.ModelState[field];
                    for(var i = 0; i < array.length; i++) {
                        messages.push(array[i]);
                    }
                }
            }

            return messages;
        };


        return {
            getValidationErrors : getValidationErrors
        };
    }
}());

//# sourceMappingURL=app.min.js.map